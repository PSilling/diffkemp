//===------------- PatternComparator.h - Code pattern finder --------------===//
//
//       SimpLL - Program simplifier for analysis of semantic difference      //
//
// This file is published under Apache 2.0 license. See LICENSE for details.
// Author: Petr Silling, psilling@redhat.com
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains the declaration of the LLVM code pattern finder and
/// comparison manager.
///
//===----------------------------------------------------------------------===//

#ifndef DIFFKEMP_SIMPLL_PATTERNCOMPARATOR_H
#define DIFFKEMP_SIMPLL_PATTERNCOMPARATOR_H

#include "PatternFunctionComparator.h"
#include "PatternSet.h"
#include <unordered_map>
#include <vector>

using namespace llvm;

/// Compares difference patterns against functions, possibly eliminating reports
/// of prior semantic differences.
class PatternComparator {
  public:
    PatternComparator(const PatternSet *Patterns,
                      const DifferentialFunctionComparator *DiffFunctionComp,
                      const Function *FnL,
                      const Function *FnR)
            : DiffFunctionComp(DiffFunctionComp) {
        // Populate the pattern function comparator map.
        for (auto &Pattern : *Patterns) {
            auto PatternFunCompL = std::make_unique<PatternFunctionComparator>(
                    FnL, Pattern.PatternL, &Pattern);
            auto PatternFunCompR = std::make_unique<PatternFunctionComparator>(
                    FnR, Pattern.PatternR, &Pattern);

            PatternFunComps.try_emplace(
                    &Pattern,
                    std::make_pair(std::move(PatternFunCompL),
                                   std::move(PatternFunCompR)));
        }
    };

    /// Individual matched instructions, combined for both all matched patterns.
    InstructionSet AllInstMatches;
    /// Matched pairs of mapped pattern instructions. Instructions from the left
    /// module side are used as keys.
    mutable InstructionMap InstMappings;
    /// Matched pairs of mapped input instructions and operands. Input from the
    /// left module side is used for keys.
    mutable InstructionMap InputMappings;

    /// Tries to match a difference pattern starting with instructions that may
    /// be matched to the given instruction pair. Returns true if a valid match
    /// is found.
    bool matchPattern(const Instruction *InstL, const Instruction *InstR);

  private:
    /// Pair of corresponding pattern function comparators.
    using PatternFunctionComparatorPair =
            std::pair<std::unique_ptr<PatternFunctionComparator>,
                      std::unique_ptr<PatternFunctionComparator>>;

    /// Parent DifferentialFunctionComparator the compares the module functions.
    const DifferentialFunctionComparator *DiffFunctionComp;
    /// Pattern function comparators associated with the current set of patterns
    /// and the currently compared functions.
    DenseMap<const Pattern *, PatternFunctionComparatorPair> PatternFunComps;

    /// Check whether the input mapping generated by the given pattern function
    /// comparator pair is valid even when both compared modules are analysed at
    /// once.
    bool inputMappingValid(const Pattern *Pat,
                           const PatternFunctionComparatorPair *PatternComps);

    /// Create the resulting instruction mapping and add all matched
    /// instructions into the combined instruction set.
    void processPatternMatch(const Pattern *Pat,
                             const PatternFunctionComparatorPair *PatternComps);
};

#endif // DIFFKEMP_SIMPLL_PATTERNCOMPARATOR_H
